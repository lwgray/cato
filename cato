#!/bin/bash

# Cato Visualization Dashboard CLI
# Commands: start, stop, restart, status, logs

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Read config
if [ ! -f "config.json" ]; then
    echo -e "${RED}Error: config.json not found${NC}"
    exit 1
fi

BACKEND_PORT=$(python3 -c "import json; print(json.load(open('config.json'))['backend']['port'])" 2>/dev/null || echo "4301")
BACKEND_HOST=$(python3 -c "import json; print(json.load(open('config.json'))['backend']['host'])" 2>/dev/null || echo "localhost")
FRONTEND_PORT=$(python3 -c "import json; print(json.load(open('config.json'))['frontend']['port'])" 2>/dev/null || echo "5173")

# Functions
start_backend() {
    if lsof -Pi :${BACKEND_PORT} -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "${YELLOW}Backend already running on port ${BACKEND_PORT}${NC}"
        return 0
    fi

    echo -e "${BLUE}Starting backend on port ${BACKEND_PORT}...${NC}"
    cd "$SCRIPT_DIR"
    PYTHONPATH="$SCRIPT_DIR" python backend/api.py > /tmp/cato-backend.log 2>&1 &
    BACKEND_PID=$!

    # Wait for backend to be ready
    echo -n "  Waiting for backend"
    for i in {1..30}; do
        if curl -s "http://${BACKEND_HOST}:${BACKEND_PORT}/health" > /dev/null 2>&1; then
            echo -e " ${GREEN}✓${NC}"
            echo -e "${GREEN}Backend started (PID: ${BACKEND_PID})${NC}"
            return 0
        fi
        echo -n "."
        sleep 1
    done

    echo -e " ${RED}✗${NC}"
    echo -e "${RED}Backend failed to start. Check logs: tail -f /tmp/cato-backend.log${NC}"
    return 1
}

start_frontend() {
    # Update .env first
    ENV_FILE="dashboard/.env"
    cat > "$ENV_FILE" << EOF
# Backend API URL - Auto-generated from config.json
# DO NOT EDIT - This file is updated by cato CLI
VITE_API_URL=http://${BACKEND_HOST}:${BACKEND_PORT}

# Data source mode
VITE_DATA_MODE=live
EOF

    if lsof -Pi :${FRONTEND_PORT} -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "${YELLOW}Frontend already running on port ${FRONTEND_PORT}${NC}"
        return 0
    fi

    echo -e "${BLUE}Starting frontend on port ${FRONTEND_PORT}...${NC}"
    cd "$SCRIPT_DIR/dashboard"
    npm run dev > /tmp/cato-frontend.log 2>&1 &
    FRONTEND_PID=$!
    echo -e "${GREEN}Frontend started (PID: ${FRONTEND_PID})${NC}"
    sleep 2
}

stop_services() {
    echo -e "${BLUE}Stopping Cato services...${NC}"

    # Stop backend
    pkill -f "python.*backend/api.py" && echo -e "${GREEN}✓ Backend stopped${NC}" || echo -e "${YELLOW}  Backend not running${NC}"

    # Stop frontend
    pkill -f "vite" && echo -e "${GREEN}✓ Frontend stopped${NC}" || echo -e "${YELLOW}  Frontend not running${NC}"
}

show_status() {
    echo -e "${BLUE}Cato Dashboard Status${NC}"
    echo -e "======================="

    # Backend status
    if lsof -Pi :${BACKEND_PORT} -sTCP:LISTEN -t >/dev/null 2>&1; then
        BACKEND_PID=$(lsof -Pi :${BACKEND_PORT} -sTCP:LISTEN -t)
        echo -e "Backend:  ${GREEN}Running${NC} (PID: ${BACKEND_PID}, Port: ${BACKEND_PORT})"
        curl -s "http://${BACKEND_HOST}:${BACKEND_PORT}/health" > /dev/null 2>&1 && echo -e "          ${GREEN}✓ Healthy${NC}" || echo -e "          ${RED}✗ Unhealthy${NC}"
    else
        echo -e "Backend:  ${RED}Stopped${NC}"
    fi

    # Frontend status
    if lsof -Pi :${FRONTEND_PORT} -sTCP:LISTEN -t >/dev/null 2>&1; then
        FRONTEND_PID=$(lsof -Pi :${FRONTEND_PORT} -sTCP:LISTEN -t)
        echo -e "Frontend: ${GREEN}Running${NC} (PID: ${FRONTEND_PID}, Port: ${FRONTEND_PORT})"
        echo -e "          ${BLUE}http://localhost:${FRONTEND_PORT}${NC}"
    else
        echo -e "Frontend: ${RED}Stopped${NC}"
    fi

    echo ""
    echo "Logs:"
    echo "  Backend:  tail -f /tmp/cato-backend.log"
    echo "  Frontend: tail -f /tmp/cato-frontend.log"
}

show_logs() {
    if [ "$1" == "backend" ]; then
        tail -f /tmp/cato-backend.log
    elif [ "$1" == "frontend" ]; then
        tail -f /tmp/cato-frontend.log
    else
        echo -e "${BLUE}Showing both logs (Ctrl+C to stop)...${NC}"
        tail -f /tmp/cato-backend.log -f /tmp/cato-frontend.log
    fi
}

show_help() {
    cat << EOF
${BLUE}Cato Visualization Dashboard CLI${NC}

Usage: cato <command> [options]

Commands:
  start              Start both backend and frontend
  stop               Stop all services
  restart            Restart all services
  status             Show service status
  logs [service]     Show logs (backend, frontend, or both)
  backend            Start only backend
  frontend           Start only frontend
  help               Show this help message

Examples:
  cato start         # Start the dashboard
  cato stop          # Stop all services
  cato restart       # Restart everything
  cato status        # Check what's running
  cato logs backend  # View backend logs
  cato logs          # View all logs

Configuration:
  Edit config.json to change ports

EOF
}

# Main command handler
case "$1" in
    start)
        echo -e "${BLUE}========================================${NC}"
        echo -e "${BLUE}  Cato Visualization Dashboard${NC}"
        echo -e "${BLUE}========================================${NC}"
        echo ""
        start_backend
        start_frontend
        echo ""
        echo -e "${GREEN}========================================${NC}"
        echo -e "${GREEN}  Dashboard Started!${NC}"
        echo -e "${GREEN}========================================${NC}"
        echo ""
        echo -e "Backend:  http://${BACKEND_HOST}:${BACKEND_PORT}"
        echo -e "Frontend: http://localhost:${FRONTEND_PORT}"
        echo ""
        echo "Run 'cato status' to check service status"
        echo "Run 'cato logs' to view logs"
        echo "Run 'cato stop' to stop services"
        ;;

    stop)
        stop_services
        ;;

    restart)
        echo -e "${BLUE}Restarting Cato Dashboard...${NC}"
        stop_services
        sleep 2
        start_backend
        start_frontend
        echo -e "${GREEN}Dashboard restarted${NC}"
        ;;

    status)
        show_status
        ;;

    logs)
        show_logs "$2"
        ;;

    backend)
        start_backend
        ;;

    frontend)
        start_frontend
        ;;

    help|--help|-h|"")
        show_help
        ;;

    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
